using System;

namespace ExceptionHandler
{
    /// <summary>
    /// class for ExceptionApp which inherits class AccessViolationException
    /// </summary>
    [Serializable]
    public class ExceptionApp : AccessViolationException
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);
        [NonSerializedAttribute]
        private ExceptionMessage _ExceptionMessage = null;

        public ExceptionMessage ExceptionMessage
        {
            get { return _ExceptionMessage; }
        }

        /// <summary>
        /// Constructor for ExceptionApp class.
        /// </summary>
        public ExceptionApp()
        {
        }

        /// <summary>
        ///Method for ExceptionMessage
        /// </summary>
        /// <param name="message">This Indicates the custom message which developer use to pass</param>
        /// <param name="MediaKey">This indicates the media in which form exception logs eg: TXT for text file,DB for database table.,EV: for System Event Viewer.CSV: for Comma seperated file</param>
        /// <param name="exception">This Indicates the default exception which is generated by application</param>
        public ExceptionApp(string message, string MediaKey, Exception exception)
            : base(message)
        {
            _ExceptionMessage = new ExceptionMessage(message);
            ExceptionWriteLog.Instance.LogException(_ExceptionMessage, MediaKey, exception);
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="message">This Indicates the custom message which developer use to pass</param>
        /// <param name="MediaKey">This indicates the media in which form exception logs eg: TXT for text file,DB for database table.,EV: for System Event Viewer.CSV: for Comma seperated file</param>
        /// <param name="exception">This Indicates the default exception which is generated by application</param>
        /// <param name="ExceptionMsg">This is a AdInsight Custom message wich is used to maintain all the function execution cycle</param>
        public ExceptionApp(string message, string MediaKey, Exception exception, ExceptionMessage ExceptionMsg)
            : base("No Messgae Given", exception)
        {
            _ExceptionMessage = new ExceptionMessage(exception.Message);
            ExceptionWriteLog.Instance.LogException(_ExceptionMessage, MediaKey, exception);
        }

        /// <summary>
        /// This method is used to delete all the exception files from the
        /// </summary>
        /// <param name="allExceptionlogs"></param>
        public string DeleteOldExceptoinLogs(bool allExceptionlogs)
        {
            return ExceptionWriteLog.Instance.DeleteOldExceptionLogs(allExceptionlogs);
        }

        /// <summary>
        /// This method is used to delete all the exceptionlogs from ExceptionLog folder based on the date ragne spacified.
        /// </summary>
        /// <param name="startDate">Starting date in "mm/dd/yyyy" Fromat</param>
        /// <param name="endDate">End date in "mm/dd/yyyy" Fromat</param>
        public string DeleteOldExceptoinLogs(string startDate, string endDate)
        {
            return ExceptionWriteLog.Instance.DeleteOldExceptionLogs(startDate, endDate);
        }

        /// <summary>
        /// Method for Log to Database.
        /// </summary>
        /// <param name="ex">Exception</param>
        /// <param name="ConnectionString">ConnectionString</param>
        /// <param name="dbname">string</param>
        /// <returns></returns>
        public string LogToDatabase(Exception ex, string ConnectionString, string dbname = "")
        {
            return ExceptionWriteLog.Instance.LogToDatabase(ex, ConnectionString, dbname);
        }

        public void Log4NetInfoLogging(string message)
        {
            log.Info(message);
        }
    }
}